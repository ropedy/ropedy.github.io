{"version":3,"sources":["lib/CharacterCanvas.js","src/snake/snake.js"],"names":["CharacterCanvas","id","width","height","options","_populateUnsetOptionsWithDefaults","rows","element","document","querySelector","Object","assign","monitorHeight","clientHeight","monitorWidth","clientWidth","rowHeight","colWidth","style","fontFamily","fontSize","color","fontColor","backgroundColor","_createRows","i","row","createElement","classList","add","characters","j","character","innerHTML","getCoordinates","x","y","hightlightCharacters","push","append","defaults","def","hasOwnProperty","css","snake","run","size","canvas","direction","newDirection","apple","getApple","paused","setInterval","str","clear","length","setCharacter","lastIdx","head","gotApple","shift","outOfBounds","selfCollision","slice","some","part","onkeydown","evt","key","Math","floor","random"],"mappings":"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","file":"snake.5816940f.map","sourceRoot":"..\\app","sourcesContent":["\"use strict\";\r\n\r\nclass CharacterCanvas {\r\n  constructor(id, width, height, options = {}) {\r\n    this._populateUnsetOptionsWithDefaults(options)\r\n    this.options = options;\r\n\r\n    this.rows = [];\r\n    this.element = document.querySelector(\"#\" + id);\r\n    Object.assign(this, { width, height });\r\n\r\n    this.monitorHeight = this.element.clientHeight;\r\n    this.monitorWidth = this.element.clientWidth;\r\n    this.rowHeight = this.monitorHeight / this.height;\r\n    this.colWidth = this.monitorWidth / this.width;\r\n\r\n    this.element.style.fontFamily = this.options.fontFamily;\r\n    this.element.style.fontSize = this.rowHeight + \"px\";\r\n    this.element.style.color = this.options.fontColor;\r\n    this.element.style.backgroundColor = this.options.backgroundColor;\r\n\r\n    this._createRows();\r\n  }\r\n\r\n  _createRows() {\r\n    for (let i = 0 ; i < this.height ; i++) {\r\n      const row = document.createElement(\"div\");\r\n\r\n      row.style.height = this.rowHeight + \"px\";\r\n\r\n      row.classList.add(\"row\");\r\n\r\n      row.characters = [];\r\n\r\n      for (let j = 0 ; j < this.width ; j++) {\r\n        const character = document.createElement(\"span\");\r\n        const char = \" \";\r\n        character.innerHTML = char;\r\n        character.style.width = this.colWidth + \"px\";\r\n        character.style.height = this.rowHeight + \"px\";\r\n        character.style.color = this.options.fontColor;\r\n        character.style.backgroundColor = this.options.backgroundColor;\r\n\r\n        character.getCoordinates = () => {\r\n         return { x: j, y: i};\r\n        }\r\n\r\n        character.classList.add(\"character\");\r\n\r\n        if (this.options.hightlightCharacters) {\r\n          character.classList.add(\"invert-on-hover\");\r\n        }\r\n\r\n        row.characters.push(character);\r\n        row.append(character);\r\n      }\r\n\r\n      this.rows.push(row);\r\n      this.element.append(row);\r\n    }\r\n  }\r\n\r\n  _populateUnsetOptionsWithDefaults(options) {\r\n    const defaults = {\r\n      fontFamily: \"Courier New, Courier, monospace\",\r\n      fontColor: \"white\",\r\n      backgroundColor: \"black\",\r\n      hightlightCharacters: true\r\n    }\r\n\r\n    for (const def in defaults) {\r\n      if (!options.hasOwnProperty(def)) {\r\n        options[def] = defaults[def];\r\n      }\r\n    }\r\n  }\r\n\r\n  setCharacter(x, y, character, css = {}) {\r\n    this.rows[y].characters[x].innerHTML = character;\r\n\r\n    for (const style in css) {\r\n      this.rows[y].characters[x].style[style] = css[style];\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    for (let x = 0 ; x < this.height ; x++) {\r\n      for (let y = 0 ; y < this.width ; y++) {\r\n        this.rows[x].characters[y].innerHTML = \" \";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default CharacterCanvas;","\"use strict\";\r\n\r\nimport CharacterCanvas from \"../../lib/CharacterCanvas\";\r\n\r\nconst snake = {\r\n  run: function() {\r\n    const size = {width: 20, height: 20};\r\n    const canvas = new CharacterCanvas(\"character-canvas\", size.width, size.height, {\r\n      fontFamily: \"Lucida Console, Monaco, monospace\"\r\n    });\r\n\r\n    let snake = [{x: 8, y: 10}, {x: 9, y: 10}, {x: 10, y: 10}, {x: 11, y: 10}, {x: 12, y: 10}];\r\n    let direction = \"right\";\r\n    let newDirection = \"right\";\r\n    let apple = this.getApple(snake, size);\r\n    let paused = true;\r\n    \r\n    setInterval(() => {\r\n      if (!paused) {\r\n        direction = newDirection;\r\n        let lastIdx = snake.length - 1;\r\n        let head = snake[lastIdx];\r\n        const gotApple = apple.x === head.x && apple.y === head.y;\r\n        canvas.clear();\r\n\r\n        if (direction === \"up\") {\r\n          snake.push({x: head.x, y: head.y - 1});\r\n        }\r\n        else if (direction === \"down\") {\r\n          snake.push({x: head.x, y: head.y + 1});\r\n        }\r\n        else if (direction === \"left\") {\r\n          snake.push({x: head.x - 1, y: head.y});\r\n        }\r\n        else if (direction === \"right\") {\r\n          snake.push({x: head.x + 1, y: head.y});\r\n        }\r\n\r\n        if (gotApple) {\r\n          apple = this.getApple(snake, size);\r\n        }\r\n        else {\r\n          snake.shift();\r\n        }\r\n\r\n        lastIdx = snake.length - 1;\r\n        head = snake[lastIdx];\r\n\r\n        const outOfBounds = head.x < 0 || head.x > size.width - 1 || head.y < 0 || head.y > size.height - 1;\r\n        const selfCollision = snake.slice(0, lastIdx).some(part => part.x === head.x && part.y === head.y);\r\n\r\n        if (outOfBounds || selfCollision) {\r\n          direction = \"right\";\r\n          newDirection = \"right\";\r\n          snake = [{x: 8, y: 10}, {x: 9, y: 10}, {x: 10, y: 10}, {x: 11, y: 10}, {x: 12, y: 10}];\r\n          apple = this.getApple(snake, size);\r\n          paused = true;\r\n        }\r\n        else {\r\n          canvas.setCharacter(apple.x, apple.y, \"o\", {\r\n            color: \"red\"\r\n          });\r\n  \r\n          for (const part of snake) {\r\n            canvas.setCharacter(part.x, part.y, \"#\", {\r\n              color: \"green\"\r\n            });\r\n          }\r\n        }\r\n\r\n        if (outOfBounds || selfCollision) {\r\n          direction = \"right\";\r\n          newDirection = \"right\";\r\n          snake = [{x: 8, y: 10}, {x: 9, y: 10}, {x: 10, y: 10}, {x: 11, y: 10}, {x: 12, y: 10}];\r\n          apple = this.getApple(snake, size);\r\n          paused = true;\r\n        }\r\n      }\r\n      else {\r\n        const str = [\"P\", \"A\", \"U\", \"S\", \"E\", \"D\"];\r\n        canvas.clear();\r\n        for (let i = 0; i < str.length; i++) {\r\n          canvas.setCharacter(5 + i, 5, str[i], {\r\n            color: \"white\"\r\n          });\r\n        }\r\n      }\r\n    }, 200);\r\n    \r\n    document.onkeydown = function(evt) {\r\n      if (evt.key === \"ArrowUp\" && direction !== \"down\") {\r\n        newDirection = \"up\";\r\n        paused = false;\r\n      }\r\n      else if (evt.key === \"ArrowDown\" && direction !== \"up\") {\r\n        newDirection = \"down\";\r\n        paused = false;\r\n      }\r\n      else if (evt.key === \"ArrowLeft\" && direction !== \"right\") {\r\n        newDirection = \"left\";\r\n        paused = false;\r\n      }\r\n      else if (evt.key === \"ArrowRight\" && direction !== \"left\") {\r\n        newDirection = \"right\";\r\n        paused = false;\r\n      }\r\n      if (evt.key === \"p\") {\r\n        paused = true;\r\n      }\r\n    }\r\n  },\r\n\r\n  getApple: function(snake, size) {\r\n    let x, y;\r\n    do {\r\n      x = Math.floor(Math.random() * size.width);\r\n      y = Math.floor(Math.random() * size.height);\r\n\r\n    } while (snake.some(part => part.x === x && part.y === y))\r\n\r\n    return { x, y };\r\n  }\r\n}\r\n\r\nsnake.run();"]}