{"version":3,"sources":["lib/CharacterCanvas.js","src/mine_sweeper/mineSweeper.js"],"names":["CharacterCanvas","id","width","height","options","_populateUnsetOptionsWithDefaults","rows","element","document","querySelector","Object","assign","monitorHeight","clientHeight","monitorWidth","clientWidth","rowHeight","colWidth","style","fontFamily","fontSize","color","fontColor","backgroundColor","_createRows","i","row","createElement","classList","add","characters","j","character","innerHTML","getCoordinates","x","y","hightlightCharacters","push","append","defaults","def","hasOwnProperty","css","mineSweeper","run","minesAmount","location","search","params","slice","split","param","splitted","size","canvas","firstClick","cells","clickLoopHistory","gameOver","completed","char","coords","open","mine","flag","addEventListener","clear","length","click","evt","preventDefault","rightClick","loop","cell","getMines","surroundingMines","countSurroundingMines","hasBeenClicked","some","hCoords","xCoord","yCoord","checkIfCompleted","draw","setCharacter","toString","occupied","Math","floor","random","c","mines","forEach","cellX","cellY","count"],"mappings":"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","file":"mineSweeper.14e6762d.map","sourceRoot":"..\\app","sourcesContent":["\"use strict\";\r\n\r\nclass CharacterCanvas {\r\n  constructor(id, width, height, options = {}) {\r\n    this._populateUnsetOptionsWithDefaults(options)\r\n    this.options = options;\r\n\r\n    this.rows = [];\r\n    this.element = document.querySelector(\"#\" + id);\r\n    Object.assign(this, { width, height });\r\n\r\n    this.monitorHeight = this.element.clientHeight;\r\n    this.monitorWidth = this.element.clientWidth;\r\n    this.rowHeight = this.monitorHeight / this.height;\r\n    this.colWidth = this.monitorWidth / this.width;\r\n\r\n    this.element.style.fontFamily = this.options.fontFamily;\r\n    this.element.style.fontSize = this.rowHeight + \"px\";\r\n    this.element.style.color = this.options.fontColor;\r\n    this.element.style.backgroundColor = this.options.backgroundColor;\r\n\r\n    this._createRows();\r\n  }\r\n\r\n  _createRows() {\r\n    for (let i = 0 ; i < this.height ; i++) {\r\n      const row = document.createElement(\"div\");\r\n\r\n      row.style.height = this.rowHeight + \"px\";\r\n\r\n      row.classList.add(\"row\");\r\n\r\n      row.characters = [];\r\n\r\n      for (let j = 0 ; j < this.width ; j++) {\r\n        const character = document.createElement(\"span\");\r\n        const char = \" \";\r\n        character.innerHTML = char;\r\n        character.style.width = this.colWidth + \"px\";\r\n        character.style.height = this.rowHeight + \"px\";\r\n        character.style.color = this.options.fontColor;\r\n        character.style.backgroundColor = this.options.backgroundColor;\r\n\r\n        character.getCoordinates = () => {\r\n         return { x: j, y: i};\r\n        }\r\n\r\n        character.classList.add(\"character\");\r\n\r\n        if (this.options.hightlightCharacters) {\r\n          character.classList.add(\"invert-on-hover\");\r\n        }\r\n\r\n        row.characters.push(character);\r\n        row.append(character);\r\n      }\r\n\r\n      this.rows.push(row);\r\n      this.element.append(row);\r\n    }\r\n  }\r\n\r\n  _populateUnsetOptionsWithDefaults(options) {\r\n    const defaults = {\r\n      fontFamily: \"Courier New, Courier, monospace\",\r\n      fontColor: \"white\",\r\n      backgroundColor: \"black\",\r\n      hightlightCharacters: true\r\n    }\r\n\r\n    for (const def in defaults) {\r\n      if (!options.hasOwnProperty(def)) {\r\n        options[def] = defaults[def];\r\n      }\r\n    }\r\n  }\r\n\r\n  setCharacter(x, y, character, css = {}) {\r\n    this.rows[y].characters[x].innerHTML = character;\r\n\r\n    for (const style in css) {\r\n      this.rows[y].characters[x].style[style] = css[style];\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    for (let x = 0 ; x < this.height ; x++) {\r\n      for (let y = 0 ; y < this.width ; y++) {\r\n        this.rows[x].characters[y].innerHTML = \" \";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default CharacterCanvas;","\"use strict\";\r\n\r\nimport CharacterCanvas from \"../../lib/CharacterCanvas\";\r\n\r\nconst mineSweeper = {\r\n  run: function() {\r\n    let width = 16, height = 16, minesAmount = 40;\r\n\r\n    if (location.search) {\r\n      const params = location.search.slice(1).split(\"&\");\r\n\r\n      for (const param of params) {\r\n        const splitted = param.split(\"=\");\r\n        \r\n        switch (splitted[0]) {\r\n          case \"width\":\r\n            width = +splitted[1];\r\n            break;\r\n          case \"height\":\r\n            height = +splitted[1];\r\n            break;\r\n          case \"mines\":\r\n            minesAmount = +splitted[1];\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    const size = { width, height };\r\n    const canvas = new CharacterCanvas(\"character-canvas\", size.width, size.height, {\r\n      fontFamily: \"Lucida Console, Monaco, monospace\"\r\n    });\r\n\r\n    let firstClick = true;\r\n    let cells = [];\r\n    let clickLoopHistory = [];\r\n    let mines;\r\n    let gameOver = false;\r\n    let completed = false;\r\n\r\n    for (let row of canvas.rows) {\r\n      cells.push([]);\r\n      for (let char of row.characters) {\r\n        const coords = char.getCoordinates();\r\n        cells[coords.y].push({\r\n          open: false,\r\n          mine: false,\r\n          flag: false\r\n        }); \r\n\r\n        char.addEventListener(\"click\", () => {\r\n          if (!gameOver && !completed) {\r\n            click(coords);\r\n          }\r\n          else {\r\n            canvas.clear();\r\n\r\n            firstClick = true;\r\n            gameOver = false;\r\n            completed = false;\r\n\r\n            for (let y = 0; y < cells.length; y++) {\r\n              for (let x = 0; x < cells[y].length; x++) {\r\n                cells[y][x] = {\r\n                  open: false,\r\n                  mine: false,\r\n                  flag: false\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        char.addEventListener(\"contextmenu\", (evt) => {\r\n          evt.preventDefault();\r\n\r\n          rightClick(coords);\r\n        });\r\n      }\r\n    }\r\n\r\n    const click = (coords, loop = false) => {\r\n      const cell = cells[coords.y][coords.x];\r\n\r\n      if (firstClick) {\r\n        firstClick = false;\r\n        mines = getMines(coords);\r\n\r\n        for (let y = 0; y < cells.length; y++) {\r\n          for (let x = 0; x < cells[y].length; x++) {\r\n            cells[y][x].surroundingMines = countSurroundingMines(x, y);\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        if (cell.mine) {\r\n          gameOver = true;\r\n        }\r\n      }\r\n\r\n      const hasBeenClicked = clickLoopHistory.some(hCoords => hCoords.x === coords.x && hCoords.y === coords.y);\r\n\r\n      if (cell.surroundingMines === 0 && !hasBeenClicked) {\r\n        for (let x = -1; x < 2; x++) {\r\n          for (let y = -1; y < 2; y++) {\r\n            const xCoord = coords.x + x;\r\n            const yCoord = coords.y + y;\r\n\r\n            if (xCoord > -1 && xCoord < size.width && yCoord > -1 && yCoord < size.height) {\r\n              clickLoopHistory.push(coords);\r\n              click({x: xCoord, y: yCoord}, true);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      cell.open = true;\r\n\r\n      if (!loop) {\r\n        clickLoopHistory = [];\r\n        completed = checkIfCompleted();\r\n        draw();\r\n      }\r\n    }\r\n\r\n    const rightClick = (coords) => {\r\n      const cell = cells[coords.y][coords.x];\r\n\r\n      if (!cell.open) {\r\n        cell.flag = !cell.flag;\r\n      }\r\n\r\n      draw();\r\n    }\r\n\r\n    const draw = () => {\r\n      canvas.clear();\r\n\r\n      for (let y = 0; y < cells.length; y++) {\r\n        for (let x = 0; x < cells[y].length; x++) {\r\n          if (cells[y][x].open) {\r\n            canvas.setCharacter(x, y, cells[y][x].surroundingMines.toString(), {\r\n              color: \"white\"\r\n            });\r\n          }\r\n\r\n          if (cells[y][x].flag && !cells[y][x].open) {\r\n            canvas.setCharacter(x, y, \"!\", {\r\n              color: \"yellow\"\r\n            });\r\n          }\r\n\r\n          if ((gameOver || completed) && cells[y][x].mine) {\r\n            canvas.setCharacter(x, y, \"¤\", {\r\n              color: completed ? \"green\" : \"red\"\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const getMines = (coords) => {\r\n      let occupied = [];\r\n\r\n      for (let x = -1; x < 2; x++) {\r\n        for (let y = -1; y < 2; y++) {\r\n          occupied.push({x: coords.x + x, y: coords.y + y});\r\n        }\r\n      }\r\n\r\n      do {\r\n        let x = Math.floor(Math.random() * size.width);\r\n        let y = Math.floor(Math.random() * size.height);\r\n\r\n        if (!occupied.some(c => c.x === x && c.y === y)) {\r\n          occupied.push({x, y});\r\n        }\r\n\r\n      } while (occupied.length < minesAmount + 9);\r\n\r\n      let mines = occupied.slice(9, occupied.length);\r\n\r\n      mines.forEach(mine => {\r\n        cells[mine.y][mine.x].mine = true;\r\n      });\r\n\r\n      return mines;\r\n    }\r\n\r\n    const countSurroundingMines = (cellX ,cellY) => {\r\n      let count = 0;\r\n\r\n      for (let x = -1; x < 2; x++) {\r\n        for (let y = -1; y < 2; y++) {\r\n          if (!(x === 0 && y === 0)) {\r\n            const xCoord = cellX + x;\r\n            const yCoord = cellY + y;\r\n\r\n            if (xCoord > -1 && xCoord < size.width && yCoord > -1 && yCoord < size.height) {\r\n              if (cells[yCoord][xCoord].mine) {\r\n                count++;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return count;\r\n    }\r\n\r\n    const checkIfCompleted = () => {\r\n      for (let y = 0; y < cells.length; y++) {\r\n        for (let x = 0; x < cells[y].length; x++) {\r\n          if (!cells[y][x].open && !cells[y][x].mine) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nmineSweeper.run();"]}