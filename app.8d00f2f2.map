{"version":3,"sources":["lib/ASCIIMonitor.js","scr/test.js","scr/snake.js","scr/mineSweeper.js","scr/app.js","index.js"],"names":["ASCIIMonitor","id","width","height","options","_populateUnsetOptionsWithDefaults","rows","element","document","querySelector","Object","assign","monitorHeight","clientHeight","monitorWidth","clientWidth","rowHeight","colWidth","style","fontFamily","fontSize","color","fontColor","backgroundColor","_createRows","i","row","createElement","classList","add","characters","j","character","innerHTML","getCoordinates","x","y","hightlightCharacters","push","append","defaults","def","hasOwnProperty","css","run","monitor","player","char","blocks","Math","floor","random","some","coords","draw","clear","setCharacter","textShadow","obj","tryMove","outOfBounds","blockOnTheWay","onkeydown","evt","key","size","snake","direction","newDirection","apple","getApple","paused","setInterval","str","length","lastIdx","head","gotApple","shift","selfCollision","slice","part","minesAmount","location","search","params","split","param","splitted","firstClick","cells","clickLoopHistory","gameOver","completed","open","mine","flag","addEventListener","click","preventDefault","rightClick","loop","cell","getMines","surroundingMines","countSurroundingMines","hasBeenClicked","hCoords","xCoord","yCoord","checkIfCompleted","toString","occupied","c","mines","forEach","cellX","cellY","count","app"],"mappings":"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","file":"app.8d00f2f2.map","sourceRoot":"..\\app","sourcesContent":["\"use strict\";\r\n\r\nclass ASCIIMonitor {\r\n  constructor(id, width, height, options = {}) {\r\n    this._populateUnsetOptionsWithDefaults(options)\r\n    this.options = options;\r\n\r\n    this.rows = [];\r\n    this.element = document.querySelector(\"#\" + id);\r\n    Object.assign(this, { width, height });\r\n\r\n    this.monitorHeight = this.element.clientHeight;\r\n    this.monitorWidth = this.element.clientWidth;\r\n    this.rowHeight = this.monitorHeight / this.height;\r\n    this.colWidth = this.monitorWidth / this.width;\r\n\r\n    this.element.style.fontFamily = this.options.fontFamily;\r\n    this.element.style.fontSize = this.rowHeight + \"px\";\r\n    this.element.style.color = this.options.fontColor;\r\n    this.element.style.backgroundColor = this.options.backgroundColor;\r\n\r\n    this._createRows();\r\n  }\r\n\r\n  _createRows() {\r\n    for (let i = 0 ; i < this.height ; i++) {\r\n      const row = document.createElement(\"div\");\r\n\r\n      row.style.height = this.rowHeight + \"px\";\r\n\r\n      row.classList.add(\"row\");\r\n\r\n      row.characters = [];\r\n\r\n      for (let j = 0 ; j < this.width ; j++) {\r\n        const character = document.createElement(\"span\");\r\n        const char = \" \";\r\n        character.innerHTML = char;\r\n        character.style.width = this.colWidth + \"px\";\r\n        character.style.height = this.rowHeight + \"px\";\r\n        character.style.color = this.options.fontColor;\r\n        character.style.backgroundColor = this.options.backgroundColor;\r\n\r\n        character.getCoordinates = () => {\r\n         return { x: j, y: i};\r\n        }\r\n\r\n        character.classList.add(\"character\");\r\n\r\n        if (this.options.hightlightCharacters) {\r\n          character.classList.add(\"invert-on-hover\");\r\n        }\r\n\r\n        row.characters.push(character);\r\n        row.append(character);\r\n      }\r\n\r\n      this.rows.push(row);\r\n      this.element.append(row);\r\n    }\r\n  }\r\n\r\n  _populateUnsetOptionsWithDefaults(options) {\r\n    const defaults = {\r\n      fontFamily: \"Courier New, Courier, monospace\",\r\n      fontColor: \"white\",\r\n      backgroundColor: \"black\",\r\n      hightlightCharacters: true\r\n    }\r\n\r\n    for (const def in defaults) {\r\n      if (!options.hasOwnProperty(def)) {\r\n        options[def] = defaults[def];\r\n      }\r\n    }\r\n  }\r\n\r\n  setCharacter(x, y, character, css = {}) {\r\n    this.rows[y].characters[x].innerHTML = character;\r\n\r\n    for (const style in css) {\r\n      this.rows[y].characters[x].style[style] = css[style];\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    for (let x = 0 ; x < this.height ; x++) {\r\n      for (let y = 0 ; y < this.width ; y++) {\r\n        this.rows[x].characters[y].innerHTML = \" \";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ASCIIMonitor;","\"use strict\";\r\n\r\nimport ASCIIMonitor from \"../lib/ASCIIMonitor\";\r\n\r\nexport default {\r\n  run: () => {\r\n    const monitor = new ASCIIMonitor(\"test-area\", 10, 10, {\r\n      fontFamily: \"Lucida Console, Monaco, monospace\"\r\n    });\r\n\r\n    const player = {\r\n      x: 2,\r\n      y: 2,\r\n      char: \"@\"\r\n    }\r\n    const blocks = [];\r\n\r\n    for (let i = 0 ; i < 10 ; i++) {\r\n      const x = Math.floor(Math.random() * 10);\r\n      const y = Math.floor(Math.random() * 10);\r\n      const char = \"#\";\r\n\r\n      if ([player, ...blocks].some(coords => coords.x === x && coords.y === y)) {\r\n        i--;\r\n\r\n        continue;\r\n      }\r\n\r\n      blocks.push({ x, y, char });\r\n    }\r\n\r\n    const draw = () => {\r\n      monitor.clear();\r\n\r\n      monitor.setCharacter(player.x, player.y, player.char, {\r\n        color: \"green\",\r\n        textShadow: \"0 0 25px green\"\r\n      });\r\n\r\n      for (const obj of blocks) {\r\n        monitor.setCharacter(obj.x, obj.y, obj.char, {\r\n          color: \"red\",\r\n          textShadow: \"0 0 25px red\"\r\n        });\r\n      }\r\n    }\r\n\r\n    draw();\r\n\r\n    const tryMove = (x, y) => {\r\n      const outOfBounds = x < 0 || x > 9 || y < 0 || y > 9;\r\n      const blockOnTheWay = blocks.some(coords => coords.x === x && coords.y === y);\r\n\r\n      if (!outOfBounds && !blockOnTheWay) {\r\n        player.x = x;\r\n        player.y = y;\r\n\r\n        draw();\r\n      }\r\n    }\r\n\r\n    document.onkeydown = function(evt) {\r\n      if (evt.key === \"ArrowUp\") {\r\n        tryMove(player.x, player.y - 1);\r\n      }\r\n      else if (evt.key === \"ArrowDown\") {\r\n        tryMove(player.x, player.y + 1);\r\n      }\r\n      else if (evt.key === \"ArrowLeft\") {\r\n        tryMove(player.x - 1, player.y);\r\n      }\r\n      else if (evt.key === \"ArrowRight\") {\r\n        tryMove(player.x + 1, player.y);\r\n      }\r\n    }\r\n  }\r\n}","\"use strict\";\r\n\r\nimport ASCIIMonitor from \"../lib/ASCIIMonitor\";\r\n\r\nexport default {\r\n  run: function() {\r\n    const size = {width: 20, height: 20};\r\n    const monitor = new ASCIIMonitor(\"test-area\", size.width, size.height, {\r\n      fontFamily: \"Lucida Console, Monaco, monospace\"\r\n    });\r\n\r\n    let snake = [{x: 8, y: 10}, {x: 9, y: 10}, {x: 10, y: 10}, {x: 11, y: 10}, {x: 12, y: 10}];\r\n    let direction = \"right\";\r\n    let newDirection = \"right\";\r\n    let apple = this.getApple(snake, size);\r\n    let paused = true;\r\n    \r\n    setInterval(() => {\r\n      if (!paused) {\r\n        direction = newDirection;\r\n        let lastIdx = snake.length - 1;\r\n        let head = snake[lastIdx];\r\n        const gotApple = apple.x === head.x && apple.y === head.y;\r\n        monitor.clear();\r\n\r\n        if (direction === \"up\") {\r\n          snake.push({x: head.x, y: head.y - 1});\r\n        }\r\n        else if (direction === \"down\") {\r\n          snake.push({x: head.x, y: head.y + 1});\r\n        }\r\n        else if (direction === \"left\") {\r\n          snake.push({x: head.x - 1, y: head.y});\r\n        }\r\n        else if (direction === \"right\") {\r\n          snake.push({x: head.x + 1, y: head.y});\r\n        }\r\n\r\n        if (gotApple) {\r\n          apple = this.getApple(snake, size);\r\n        }\r\n        else {\r\n          snake.shift();\r\n        }\r\n\r\n        lastIdx = snake.length - 1;\r\n        head = snake[lastIdx];\r\n\r\n        const outOfBounds = head.x < 0 || head.x > size.width - 1 || head.y < 0 || head.y > size.height - 1;\r\n        const selfCollision = snake.slice(0, lastIdx).some(part => part.x === head.x && part.y === head.y);\r\n\r\n        if (outOfBounds || selfCollision) {\r\n          direction = \"right\";\r\n          newDirection = \"right\";\r\n          snake = [{x: 8, y: 10}, {x: 9, y: 10}, {x: 10, y: 10}, {x: 11, y: 10}, {x: 12, y: 10}];\r\n          apple = this.getApple(snake, size);\r\n          paused = true;\r\n        }\r\n        else {\r\n          monitor.setCharacter(apple.x, apple.y, \"o\", {\r\n            color: \"red\"\r\n          });\r\n  \r\n          for (const part of snake) {\r\n            monitor.setCharacter(part.x, part.y, \"#\", {\r\n              color: \"green\"\r\n            });\r\n          }\r\n        }\r\n\r\n        if (outOfBounds || selfCollision) {\r\n          direction = \"right\";\r\n          newDirection = \"right\";\r\n          snake = [{x: 8, y: 10}, {x: 9, y: 10}, {x: 10, y: 10}, {x: 11, y: 10}, {x: 12, y: 10}];\r\n          apple = this.getApple(snake, size);\r\n          paused = true;\r\n        }\r\n      }\r\n      else {\r\n        const str = [\"P\", \"A\", \"U\", \"S\", \"E\", \"D\"];\r\n        monitor.clear();\r\n        for (let i = 0; i < str.length; i++) {\r\n          monitor.setCharacter(5 + i, 5, str[i], {\r\n            color: \"white\"\r\n          });\r\n        }\r\n      }\r\n    }, 200);\r\n    \r\n    document.onkeydown = function(evt) {\r\n      if (evt.key === \"ArrowUp\" && direction !== \"down\") {\r\n        newDirection = \"up\";\r\n        paused = false;\r\n      }\r\n      else if (evt.key === \"ArrowDown\" && direction !== \"up\") {\r\n        newDirection = \"down\";\r\n        paused = false;\r\n      }\r\n      else if (evt.key === \"ArrowLeft\" && direction !== \"right\") {\r\n        newDirection = \"left\";\r\n        paused = false;\r\n      }\r\n      else if (evt.key === \"ArrowRight\" && direction !== \"left\") {\r\n        newDirection = \"right\";\r\n        paused = false;\r\n      }\r\n      if (evt.key === \"p\") {\r\n        paused = true;\r\n      }\r\n    }\r\n  },\r\n\r\n  getApple: function(snake, size) {\r\n    let x, y;\r\n    do {\r\n      x = Math.floor(Math.random() * size.width);\r\n      y = Math.floor(Math.random() * size.height);\r\n\r\n    } while (snake.some(part => part.x === x && part.y === y))\r\n\r\n    return { x, y };\r\n  }\r\n}","\"use strict\";\r\n\r\nimport ASCIIMonitor from \"../lib/ASCIIMonitor\";\r\n\r\nexport default {\r\n  run: function() {\r\n    let width = 16, height = 16, minesAmount = 40;\r\n\r\n    if (location.search) {\r\n      const params = location.search.slice(1).split(\"&\");\r\n\r\n      for (const param of params) {\r\n        const splitted = param.split(\"=\");\r\n        \r\n        switch (splitted[0]) {\r\n          case \"width\":\r\n            width = +splitted[1];\r\n            break;\r\n          case \"height\":\r\n            height = +splitted[1];\r\n            break;\r\n          case \"mines\":\r\n            minesAmount = +splitted[1];\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    const size = { width, height };\r\n    const monitor = new ASCIIMonitor(\"test-area\", size.width, size.height, {\r\n      fontFamily: \"Lucida Console, Monaco, monospace\"\r\n    });\r\n\r\n    let firstClick = true;\r\n    let cells = [];\r\n    let clickLoopHistory = [];\r\n    let mines;\r\n    let gameOver = false;\r\n    let completed = false;\r\n\r\n    for (let row of monitor.rows) {\r\n      cells.push([]);\r\n      for (let char of row.characters) {\r\n        const coords = char.getCoordinates();\r\n        cells[coords.y].push({\r\n          open: false,\r\n          mine: false,\r\n          flag: false\r\n        }); \r\n\r\n        char.addEventListener(\"click\", () => {\r\n          if (!gameOver && !completed) {\r\n            click(coords);\r\n          }\r\n          else {\r\n            monitor.clear();\r\n\r\n            firstClick = true;\r\n            gameOver = false;\r\n            completed = false;\r\n\r\n            for (let y = 0; y < cells.length; y++) {\r\n              for (let x = 0; x < cells[y].length; x++) {\r\n                cells[y][x] = {\r\n                  open: false,\r\n                  mine: false,\r\n                  flag: false\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        char.addEventListener(\"contextmenu\", (evt) => {\r\n          evt.preventDefault();\r\n\r\n          rightClick(coords);\r\n        });\r\n      }\r\n    }\r\n\r\n    const click = (coords, loop = false) => {\r\n      const cell = cells[coords.y][coords.x];\r\n\r\n      if (firstClick) {\r\n        firstClick = false;\r\n        mines = getMines(coords);\r\n\r\n        for (let y = 0; y < cells.length; y++) {\r\n          for (let x = 0; x < cells[y].length; x++) {\r\n            cells[y][x].surroundingMines = countSurroundingMines(x, y);\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        if (cell.mine) {\r\n          gameOver = true;\r\n        }\r\n      }\r\n\r\n      const hasBeenClicked = clickLoopHistory.some(hCoords => hCoords.x === coords.x && hCoords.y === coords.y);\r\n\r\n      if (cell.surroundingMines === 0 && !hasBeenClicked) {\r\n        for (let x = -1; x < 2; x++) {\r\n          for (let y = -1; y < 2; y++) {\r\n            const xCoord = coords.x + x;\r\n            const yCoord = coords.y + y;\r\n\r\n            if (xCoord > -1 && xCoord < size.width && yCoord > -1 && yCoord < size.height) {\r\n              clickLoopHistory.push(coords);\r\n              click({x: xCoord, y: yCoord}, true);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      cell.open = true;\r\n\r\n      if (!loop) {\r\n        clickLoopHistory = [];\r\n        completed = checkIfCompleted();\r\n        draw();\r\n      }\r\n    }\r\n\r\n    const rightClick = (coords) => {\r\n      const cell = cells[coords.y][coords.x];\r\n\r\n      if (!cell.open) {\r\n        cell.flag = !cell.flag;\r\n      }\r\n\r\n      draw();\r\n    }\r\n\r\n    const draw = () => {\r\n      monitor.clear();\r\n\r\n      for (let y = 0; y < cells.length; y++) {\r\n        for (let x = 0; x < cells[y].length; x++) {\r\n          if (cells[y][x].open) {\r\n            monitor.setCharacter(x, y, cells[y][x].surroundingMines.toString(), {\r\n              color: \"white\"\r\n            });\r\n          }\r\n\r\n          if (cells[y][x].flag && !cells[y][x].open) {\r\n            monitor.setCharacter(x, y, \"!\", {\r\n              color: \"yellow\"\r\n            });\r\n          }\r\n\r\n          if ((gameOver || completed) && cells[y][x].mine) {\r\n            monitor.setCharacter(x, y, \"¤\", {\r\n              color: completed ? \"green\" : \"red\"\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const getMines = (coords) => {\r\n      let occupied = [];\r\n\r\n      for (let x = -1; x < 2; x++) {\r\n        for (let y = -1; y < 2; y++) {\r\n          occupied.push({x: coords.x + x, y: coords.y + y});\r\n        }\r\n      }\r\n\r\n      do {\r\n        let x = Math.floor(Math.random() * size.width);\r\n        let y = Math.floor(Math.random() * size.height);\r\n\r\n        if (!occupied.some(c => c.x === x && c.y === y)) {\r\n          occupied.push({x, y});\r\n        }\r\n\r\n      } while (occupied.length < minesAmount + 9);\r\n\r\n      let mines = occupied.slice(9, occupied.length);\r\n\r\n      mines.forEach(mine => {\r\n        cells[mine.y][mine.x].mine = true;\r\n      });\r\n\r\n      return mines;\r\n    }\r\n\r\n    const countSurroundingMines = (cellX ,cellY) => {\r\n      let count = 0;\r\n\r\n      for (let x = -1; x < 2; x++) {\r\n        for (let y = -1; y < 2; y++) {\r\n          if (!(x === 0 && y === 0)) {\r\n            const xCoord = cellX + x;\r\n            const yCoord = cellY + y;\r\n\r\n            if (xCoord > -1 && xCoord < size.width && yCoord > -1 && yCoord < size.height) {\r\n              if (cells[yCoord][xCoord].mine) {\r\n                count++;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return count;\r\n    }\r\n\r\n    const checkIfCompleted = () => {\r\n      for (let y = 0; y < cells.length; y++) {\r\n        for (let x = 0; x < cells[y].length; x++) {\r\n          if (!cells[y][x].open && !cells[y][x].mine) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n  }\r\n}","\"use strict\";\r\n\r\nimport test from \"./test\";\r\nimport snake from \"./snake\";\r\nimport mineSweeper from \"./mineSweeper\";\r\n\r\n// Ideas:\r\n// AoM\r\n// Tetris\r\n// Minesweeper\r\n// Snake\r\n// Platformer\r\n// Simple rougue like\r\n\r\nexport default {\r\n  run: () => {\r\n    //test.run();\r\n    //snake.run();\r\n    mineSweeper.run();\r\n  }\r\n}","\"use strict\";\r\n\r\nimport app from \"./scr/app\";\r\n\r\napp.run();\r\n"]}